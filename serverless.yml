service: tinkerbell-server

provider:
  name: aws
  runtime: nodejs10.x
  region: ${file(${self:custom.configureFile}):ENVS.SLS_AWS_REGION}
  profile: ${file(${self:custom.configureFile}):ENVS.SLS_AWS_CRED_PROFILE}


functions:
  register:
    handler: ${self:custom.sourcePath}/handler/register-user.register
    events:
      - http:
          path: register
          method: post
    environment:
      DYNAMODB_USER_TABLE_NAME: ${file(${self:custom.configureFile}):ENVS.DYNAMODB_USER_TABLE_NAME}
      AZURE_COGNITIVE_SERVICE_KEY: ${file(${self:custom.configureFile}):ENVS.AZURE_COGNITIVE_SERVICE_KEY}
      AZURE_COGNITIVE_SERVICE_ENDPOINT: ${file(${self:custom.configureFile}):ENVS.AZURE_COGNITIVE_SERVICE_ENDPOINT}
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-register-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - Fn::GetAtt: [ DynamoDBUsers, Arn ]

resources:
  Resources:
    DynamoDBUsers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(${self:custom.configureFile}):ENVS.DYNAMODB_USER_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: identificationProfileId
            AttributeType: S
        KeySchema:
          - AttributeName: identificationProfileId
            KeyType: HASH

custom:
  configureFile: 'config/config.js'
  sourcePath: 'dist'
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules:
      forceExclude:
        - aws-sdk

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-webpack

package:
  individually: true
